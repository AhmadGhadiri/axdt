/*
 * generated by Xtext
 */
package org.axdt.as3.scoping;

import org.axdt.as3.As3EFactory;
import org.axdt.as3.As3EPackage;
import org.axdt.as3.model.As3AccessExpression;
import org.axdt.as3.model.As3Class;
import org.axdt.as3.model.As3Executable;
import org.axdt.as3.model.As3FieldBinding;
import org.axdt.as3.model.As3Package;
import org.axdt.as3.model.As3Program;
import org.axdt.as3.model.As3PropertyIdentifier;
import org.axdt.as3.model.As3WithStatement;
import org.axdt.as3.model.IIdentifier;
import org.axdt.avm.model.AvmField;
import org.axdt.avm.model.AvmIdentifiable;
import org.axdt.avm.model.AvmType;
import org.axdt.avm.model.AvmTypeReference;
import org.axdt.avm.scoping.AvmElementScope;
import org.axdt.avm.scoping.AvmPropertyScope;
import org.axdt.avm.scoping.AvmTypeScope;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.google.common.collect.Iterables;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class As3ScopeProvider extends AbstractDeclarativeScopeProvider {
	@Override
	protected IScope delegateGetScope(EObject context, EReference reference) {
		return super.delegateGetScope(context, reference);
	}

	IScope scope_AvmType(AvmTypeReference ctx, EReference ref) {
		return getDelegate().getScope(ctx, ref);
	}

	IScope scope_AvmIdentifiable(As3Program ctx, EReference ref) {
		return new As3ProgramScope(ctx, getDelegate().getScope(ctx, ref));
	}

	IScope scope_AvmIdentifiable(As3Package ctx, EReference ref) {
		// XXX is covered by workspace scope !?
		return null;
	}

	IScope scope_AvmIdentifiable(As3Class ctx, EReference ref) {
		return new AvmTypeScope(ctx, getScope(ctx.eContainer(), ref));
	}

	IScope scope_AvmIdentifiable(As3Executable ctx, EReference ref) {
		return new As3ExecutableScope(ctx, getScope(ctx.eContainer(), ref));
	}

	IScope scope_AvmIdentifiable(As3WithStatement ctx, EReference ref) {
		// TODO with statement needs its own scope 
		return null;
	}
	IScope scope_AvmIdentifiable(As3AccessExpression ctx, EReference ref) {
		return null;
	}

	IScope scope_AvmIdentifiable(As3PropertyIdentifier ctx, EReference ref) {
		As3EPackage pack = As3EPackage.eINSTANCE;
		if (ctx.eContainingFeature() == pack.getAs3PostfixOperator_Identifier()
				&& ctx.eContainer().eContainingFeature() == pack.getAs3AccessExpression_Operator()) {
			As3AccessExpression access = (As3AccessExpression) ctx.eContainer().eContainer();
			return new As3PropertyScope(access, getScope(access.eContainer(), ref));
		}
		return null;
	}

	@Override
	public IScope getScope(EObject context, EReference reference) {
		return super.getScope(context, reference);
	}
}

class As3ProgramScope extends AvmElementScope<As3Program> {

	public As3ProgramScope(As3Program element, IScope parentScope) {
		super(element, parentScope);
	}

	@Override
	protected Iterable<? extends AvmIdentifiable> getCandidates() {
		return Iterables.concat(element.getMembers(), element.getTypes());
	}
}

class As3ExecutableScope extends AvmElementScope<As3Executable> {

	public As3ExecutableScope(As3Executable element, IScope parentScope) {
		super(element, parentScope);
	}

	@Override
	protected Iterable<? extends AvmIdentifiable> getCandidates() {
		return Iterables.concat(element.getParameters(),
				element.getDeclarations());
	}
}
class As3PropertyScope extends AvmPropertyScope<As3AccessExpression> {

	public As3PropertyScope(As3AccessExpression element, IScope scope) {
		super(element, scope);
	}

	@Override
	protected AvmType getQualifierType() {
		return element.getExpression().resolveType();
	}

	@Override
	protected EObject getReference() {
		IIdentifier identifier = element.getOperator().getIdentifier();
		return identifier instanceof As3PropertyIdentifier ? identifier : null;
	}

	@Override
	protected AvmField createDynamicField(String name) {
		As3FieldBinding field = As3EFactory.eINSTANCE.createAs3FieldBinding();
		field.setName(name);
		return field;
	}
	
	@Override
	public IScope getOuterScope() {
		return IScope.NULLSCOPE;
	}
}