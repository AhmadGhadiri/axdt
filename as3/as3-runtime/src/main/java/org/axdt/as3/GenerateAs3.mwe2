/*******************************************************************************
 * Copyright (c) 2010 Martin Schnabel <mb0@mb0.org>.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 ******************************************************************************/
module org.axdt.as3

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/axdt/as3/As3.xtext"
var file.extensions = "as"
var runtimeProject = "../as3-runtime"
var uiProject = "../as3-ui"
var testProject = "../as3-test"
var srcGen = "/src/generated/java"
var src = "/src/main/java"
var antlrTimeout = "10000"

Workflow {
	bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "../../.."
	}
	component = DirectoryCleaner {
		directory = "${runtimeProject}${srcGen}"
	}
	
	component = DirectoryCleaner {
		directory = "${uiProject}${srcGen}"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = uiProject
		pathTestProject = testProject
		projectNameRt = "org.axdt.as3.runtime"
		projectNameUi = "org.axdt.as3.ui"
		srcPath = src
		srcGenPath = srcGen
		language = {
			uri = grammarURI
			fileExtensions = file.extensions
			
			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}
			
			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			
			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
				options = {
					backtrack = true
					memoize = true
					classSplitting = true
				}
				antlrParam = "-Xconversiontimeout" antlrParam = "${antlrTimeout}"
			}
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			// scoping API 	
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}
			// formatter API 
			fragment = formatting.FormatterFragment {}
			// labeling API 
			fragment = labeling.LabelProviderFragment {}
			// outline API
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment { 
				options = {
					backtrack = true
					memoize = true
					classSplitting = true
				}
				antlrParam = "-Xconversiontimeout" antlrParam = "${antlrTimeout}"
			}
			
			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment {}

			// project wizard (optional) 
			// fragment = projectWizard.SimpleProjectWizardFragment {
			// 		generatorProjectName = "${projectName}.generator" 
			//		modelFileExtension = file.extensions
			// }

			// provides the necessary bindings for java types integration
			//fragment = types.TypesGeneratorFragment {}

			// generates the required bindings only if the grammar inherits from Xbase
			//fragment = xbase.XbaseGeneratorFragment {}
			
			// provides a preference page for template proposals 
			//fragment = org.eclipse.xtext.ui.codetemplates.generator.CodetemplatesGeneratorFragment {}

			// rename refactoring
            // fragment = refactoring.RefactorElementNameFragment {}

            // provides a compare view
            // fragment = compare.CompareFragment {
            //    fileExtensions = file.extensions
            // }

            // Serializer 2.0
            // serializer.SerializerFragment {}
		}
	}
}